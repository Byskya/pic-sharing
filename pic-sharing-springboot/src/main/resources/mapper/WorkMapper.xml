<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.picsharingspringboot.mapper.WorkMapper">
    <insert id="insertImage" useGeneratedKeys="true" keyProperty = "id">
        insert into images (url,thumbnail_path)
        values (#{url},#{thumbnailPath})
    </insert>
    <insert id="insertIllustration" useGeneratedKeys="true" keyProperty = "id">
        insert into illustrations (title,description,user_id,image_id) values (#{title},#{description},#{userId},#{imageId})
    </insert>
    <insert id="insertWorkTagMap" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO illustration_tag_map (illustration_id,tag_id) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.illustrationId},#{item.tagId})
        </foreach>
    </insert>
    <insert id="addCommentByWorkId" useGeneratedKeys="true" keyProperty="id">
        insert into comments (user_id,illustration_id,content) values (#{userId},#{illustrationId},#{content})
    </insert>
    <insert id="collectWork" useGeneratedKeys="true" keyProperty="id">
        insert into favorites (user_id,illustration_id) values(#{userId},#{illustrationId})
    </insert>
    <insert id="addAuditInfo" useGeneratedKeys="true" keyProperty="id">
        insert into audit_info (user_id,illustration_id,status) values(#{userId},#{illustrationId},#{status})
    </insert>
    <insert id="addWorkTag">
        insert into illustration_tags (tag_name) values (#{tagName})
    </insert>
    <insert id="recordUserHistory">
        insert into user_history (user_id,illustration_id) values (#{userId},#{illustrationId})
    </insert>
    <insert id="likeWork">
        insert into user_likes (user_id,illustration_id) values(#{userId},#{illustrationId})
    </insert>
    <update id="upWorkViews">
        update illustrations set views = #{views} where id = #{id}
    </update>
    <update id="upWorkLike">
        update illustrations set likes = #{likes} where id = #{id}
    </update>
    <update id="reviewPass">
        update illustrations set approved = 1 where id = #{id}
    </update>
    <update id="updateAuditTable">
        update audit_info
        <set>
            <if test="status != null ">
                status = #{status}
            </if>
            <if test="feedback != null">
                , feedback = #{feedback}
            </if>
        </set>
        where illustration_id = #{illustrationId}
    </update>
    <update id="editImage" useGeneratedKeys="true" keyProperty="id">
        update images set url = #{url} , thumbnail_path = #{thumbnailPath} where id = #{id}
    </update>
    <update id="editIllustration">
        update illustrations i join audit_info a on i.id = a.illustration_id  set i.title = #{title}, i.description = #{description},i.user_id=#{userId},i.image_id = #{imageId},i.approved = 0 ,a.status = '待审核' where i.id = #{id}
    </update>
    <update id="takeoffWork">
        update illustrations set approved = #{approved} where id = #{id}
    </update>
    <update id="editWorkTag">
        update illustration_tags set tag_name = #{tagName} where id = #{id}
    </update>
    <update id="updateUserHistory">
        update user_history set updated_at = NOW() where id = #{id}
    </update>
    <delete id="deleteCollect">
        DELETE from favorites where user_id = #{userId} and illustration_id = #{illustrationId}
    </delete>
    <delete id="deleteWorkTags">
        delete from illustration_tag_map where illustration_id = #{id}
    </delete>
    <delete id="deleteWorkTagById">
        delete from illustration_tags where id = #{id}
    </delete>
    <delete id="deleteWorkById">
        delete from illustrations where user_id = #{userId} and id = #{id}
    </delete>
    <delete id="deleteUserHistoryById">
        delete from user_history where user_id = #{userId} and illustration_id = #{illustrationId}
    </delete>
    <delete id="deleteUserAllHistoryByUserId">
        delete from user_history where user_id = #{userId}
    </delete>
    <delete id="deleteImageTableDataById">
        delete from images where id = #{workId}
    </delete>
    <delete id="deleteLike">
        DELETE from user_likes where user_id = #{userId} and illustration_id = #{illustrationId}
    </delete>
    <select id="getAllTags" resultType="com.example.picsharingspringboot.entity.IllustrationTag">
        select * from illustration_tags
    </select>
    <select id="getAllUserIllustrations" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where user_id = #{userId}
    </select>
    <select id="getImageById" resultType="com.example.picsharingspringboot.entity.Image">
        select * from images where id = #{imageId}
    </select>
    <select id="getWorkTagsById" resultType="com.example.picsharingspringboot.entity.IllustrationTag">
        select t.id,t.tag_name from illustration_tags t join illustration_tag_map m on t.id = m.tag_id where m.illustration_id = #{workId}
    </select>
    <select id="getAllIllustration" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where approved = 1 ORDER BY created_at DESC
    </select>
    <select id="getIllustrationCommentById" resultType="com.example.picsharingspringboot.entity.Comment">
        select c.*,u.username,u.avatar from comments c join t_user u on c.user_id = u.id where illustration_id = #{workId}
    </select>
    <select id="getIllustrationById" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl from illustrations i join images im on i.image_id = im.id where i.id = #{id}
    </select>
    <select id="checkCollect" resultType="com.example.picsharingspringboot.entity.Favorite">
        select * from favorites where user_id = #{userId} and illustration_id = #{illustrationId}
    </select>
    <select id="getNotApprovedWorks" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id join audit_info a on a.illustration_id=i.id  where approved = 0 and a.status!='不通过'
    </select>
    <select id="getAuditInfoByWorkId" resultType="com.example.picsharingspringboot.entity.AuditInfo">
        select * from audit_info where illustration_id = #{workId}
    </select>
    <select id="getUserCollection" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id join favorites f on f.illustration_id = i.id where f.user_id = #{id}
    </select>
    <select id="getIllustrationsByKeyword" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where i.title like concat('%',#{keyword},'%')
    </select>
    <select id="getReturnWorkById" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id join audit_info a on a.illustration_id = i.id where a.status = '不通过' and a.illustration_id = #{workId}
    </select>
    <select id="getUserAllIllustrationExceptUnapproved"
            resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where user_id = #{userId} and i.approved = 1
    </select>
    <select id="getFollowingWorksByUserId" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.thumbnail_path as thumbnailUrl from user_follow uf join illustrations i on uf.following_id = i.user_id join images im on i.image_id = im.id where uf.follower_id = #{followerId} and i.approved = 1
    </select>
    <select id="getAllIllustrationIncludeUnapproved"
            resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id
    </select>
    <select id="getIllustrationByTag" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustration_tags t join illustration_tag_map m on t.id = m.tag_id join illustrations i on i.id = m.illustration_id join images im on i.image_id = im.id where t.id = #{id} and i.approved = 1
    </select>
    <select id="getEditWorkInfoById" resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.url as imageUrl,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where i.id = #{workId}
    </select>
    <select id="findUserHistory"   resultType="com.example.picsharingspringboot.entity.UserHistory">
        select * from user_history where user_id = #{userId} and illustration_id = #{illustrationId}
    </select>
    <select id="getUserWatchHistory" resultType="com.example.picsharingspringboot.entity.UserHistory">
        select * from user_history where user_id = #{userId}
    </select>
    <select id="getIllustrationThumbnailById"
            resultType="com.example.picsharingspringboot.entity.Illustration">
        select i.*,im.thumbnail_path as thumbnailUrl from illustrations i join images im on i.image_id = im.id where i.id = #{id}
    </select>
    <select id="checkLikes" resultType="com.example.picsharingspringboot.entity.Favorite">
        select * from user_likes where user_id = #{userId} and illustration_id = #{illustrationId}
    </select>
</mapper>